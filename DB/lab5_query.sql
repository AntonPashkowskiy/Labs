USE [HRDB]
GO

-- 1
SELECT 
    CAST(AVG(r.SALARY_WITH_COMMISION) AS DECIMAL(18, 4)) AS AVERAGE_SALARY
FROM
(
    SELECT CASE WHEN e.COMMISSION_PCT IS NULL THEN 
                e.SALARY 
           ELSE 
                (e.SALARY - (e.SALARY * e.COMMISSION_PCT)) 
           END AS SALARY_WITH_COMMISION 
    FROM EMPLOYEES e
) r

-- 2
SELECT 
    d.DEPARTMENT_NAME,
    ROUND(CAST(SUM(e.SALARY) AS INT), -3) AS SUM_SALARY 
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
WHERE d.DEPARTMENT_NAME LIKE N'%in%'
GROUP BY d.DEPARTMENT_NAME
ORDER BY SUM_SALARY DESC

-- 3
SELECT
    d.DEPARTMENT_NAME,
    ROUND(CAST(AVG(e.SALARY) AS INT), -1) AS AVG_SALARY
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME
HAVING COUNT(*) >= 3
ORDER BY AVG_SALARY


-- 4
SELECT
    dep.DEPARTMENT_NAME,
    CASE WHEN employee_statistic.EMPLOYEE_COUNT IS NULL THEN 0 ELSE employee_statistic.EMPLOYEE_COUNT END AS EMPLOYEE_COUNT,
    CASE WHEN salary_statistic.MEDIAN_SALARY IS NULL THEN 0 ELSE salary_statistic.MEDIAN_SALARY END AS MEDIAN_SALARY
FROM DEPARTMENTS dep
LEFT JOIN 
(
    SELECT 
        stat.DEPARTMENT_ID,
        AVG(stat.SALARY) AS MEDIAN_SALARY
    FROM 
    (
        SELECT
            ROW_NUMBER() OVER(PARTITION BY d.DEPARTMENT_NAME ORDER BY e.SALARY) AS NUMBER,
            e.*,
            d.DEPARTMENT_NAME,
            st.EMPLOYEE_COUNT
        FROM EMPLOYEES e
        INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
        INNER JOIN 
        (
            SELECT 
                em.DEPARTMENT_ID,
                COUNT(em.EMPLOYEE_ID) AS EMPLOYEE_COUNT
            FROM EMPLOYEES em    
            GROUP BY em.DEPARTMENT_ID
        ) st ON d.DEPARTMENT_ID = st.DEPARTMENT_ID
    ) stat
    -- количество работников чётное и номер принадлежит одной из половин на середине
    WHERE (stat.EMPLOYEE_COUNT % 2 = 0 AND (stat.NUMBER = stat.EMPLOYEE_COUNT / 2 OR stat.NUMBER = (stat.EMPLOYEE_COUNT / 2) + 1)) OR
    -- количетсво работников нечётное и номер равен номеру среднего
          (stat.EMPLOYEE_COUNT % 2 = 1 AND (stat.NUMBER = (stat.EMPLOYEE_COUNT / 2) + 1))
    GROUP BY stat.DEPARTMENT_ID 
) salary_statistic ON dep.DEPARTMENT_ID = salary_statistic.DEPARTMENT_ID
LEFT JOIN
(
    SELECT 
        em.DEPARTMENT_ID,
        COUNT(em.EMPLOYEE_ID) AS EMPLOYEE_COUNT
    FROM EMPLOYEES em    
    GROUP BY em.DEPARTMENT_ID
) employee_statistic ON dep.DEPARTMENT_ID = employee_statistic.DEPARTMENT_ID
ORDER BY employee_statistic.EMPLOYEE_COUNT DESC, dep.DEPARTMENT_NAME

-- 4.2
SELECT
    d.DEPARTMENT_NAME,
    esr.EMPLOYEE_COUNT,
    ssr.MEDIAN_SALARY
FROM DEPARTMENTS d
LEFT JOIN 
(
    SELECT 
        e.DEPARTMENT_ID,
        COUNT(*) AS EMPLOYEE_COUNT
    FROM EMPLOYEES e
    GROUP BY e.DEPARTMENT_ID
) esr ON d.DEPARTMENT_ID = esr.DEPARTMENT_ID
LEFT JOIN 
(
    SELECT DISTINCT
       e.DEPARTMENT_ID,
       PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY e.SALARY DESC) OVER (PARTITION BY e.DEPARTMENT_ID) AS MEDIAN_SALARY
    FROM EMPLOYEES e
) ssr ON d.DEPARTMENT_ID = ssr.DEPARTMENT_ID
ORDER BY esr.EMPLOYEE_COUNT DESC, d.DEPARTMENT_NAME


-- 5
SELECT 
    d.DEPARTMENT_NAME,
    j.JOB_TITLE,
    st.EMPLOYEE_COUNT 
FROM DEPARTMENTS d
INNER JOIN 
(
    SELECT 
        e.DEPARTMENT_ID,
        e.JOB_ID,
        COUNT(*) AS EMPLOYEE_COUNT
    FROM EMPLOYEES e
    GROUP BY e.DEPARTMENT_ID, e.JOB_ID
) st ON st.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN JOBS j ON j.JOB_ID = st.JOB_ID
ORDER BY d.DEPARTMENT_NAME, st.EMPLOYEE_COUNT

-- 6
-- учитывались только отделы в которых на данный момент работают сотрудники
SELECT TOP 1 WITH TIES
    d.DEPARTMENT_NAME,
    COUNT(*) AS EMPLOYEE_COUNT
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_ID, d.DEPARTMENT_NAME
ORDER BY EMPLOYEE_COUNT

-- 7
SELECT 
    SUM(res.REPEAT_COUNT) AS RESULT
FROM
(
    SELECT 
        e.LAST_NAME,
        COUNT(*) AS REPEAT_COUNT
    FROM EMPLOYEES e
    GROUP BY e.LAST_NAME
    HAVING COUNT(*) >= 2 
) res

-- 8
SELECT
     st.DEPARTMENT_NAME,
     CASE WHEN st.EMPLOYEE_COUNT < 5 THEN 'SMALL'
          WHEN st.EMPLOYEE_COUNT > 30 THEN 'BIG'
          ELSE 'AVERAGE' 
     END AS DEPARTAMENT_SIZE
FROM
(
    SELECT
        d.DEPARTMENT_ID,
        d.DEPARTMENT_NAME,
        COUNT(*) AS EMPLOYEE_COUNT
    FROM DEPARTMENTS d
    INNER JOIN EMPLOYEES e ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
    GROUP BY d.DEPARTMENT_ID, d.DEPARTMENT_NAME
) st
ORDER BY st.EMPLOYEE_COUNT

-- 9
SELECT
    st.CITY,
    (CAST(st.EMPLOYEE_COUNT AS FLOAT) / CAST(st.ALL_EMPLOYEE_COUNT AS FLOAT) * 100) AS PERCENT_OF_EMPLOYEE
FROM
(
    SELECT
        l.CITY,
        SUM(CASE WHEN e.EMPLOYEE_ID IS NOT NULL THEN 1 ELSE 0 END) AS EMPLOYEE_COUNT,
        (SELECT COUNT(*) FROM EMPLOYEES) AS ALL_EMPLOYEE_COUNT
    FROM LOCATIONS l
    LEFT JOIN DEPARTMENTS d ON d.LOCATION_ID = l.LOCATION_ID
    LEFT JOIN EMPLOYEES e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
    GROUP BY l.CITY
) st
ORDER BY PERCENT_OF_EMPLOYEE

-- 10
SELECT
    d.DEPARTMENT_NAME
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME, d.DEPARTMENT_ID
HAVING MIN(LEN(e.LAST_NAME)) > 5

-- 11
SELECT 
    d.DEPARTMENT_NAME,
    mg.LAST_NAME,
    (COUNT(*) - 1) AS EMPLOYEES_COUNT
FROM DEPARTMENTS d
INNER JOIN EMPLOYEES mg ON d.MANAGER_ID = mg.EMPLOYEE_ID
INNER JOIN EMPLOYEES e ON d.DEPARTMENT_ID = e.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_ID, d.DEPARTMENT_NAME, mg.LAST_NAME
ORDER BY d.DEPARTMENT_NAME

-- 12
SELECT 
    d.DEPARTMENT_NAME
FROM DEPARTMENTS d
INNER JOIN EMPLOYEES e ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY d.DEPARTMENT_NAME

EXCEPT

SELECT DISTINCT
    d.DEPARTMENT_NAME
FROM EMPLOYEES e
INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
WHERE j.JOB_ID IN 
(
    SELECT DISTINCT
        j.JOB_ID
    FROM EMPLOYEES e
    INNER JOIN DEPARTMENTS d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
    INNER JOIN JOBS j ON e.JOB_ID = j.JOB_ID
    WHERE d.DEPARTMENT_NAME = N'IT'
)

